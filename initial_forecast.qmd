---
title: "EIA API - US48 Demand for Electricity Initial Forecast"
format:
  html:
    code-fold: false
jupyter: python3
---


Load Libraries
```{python}
import pandas as pd
import json
import datetime
import pointblank as pb
from mlforecast import MLForecast
from mlforecast.target_transforms import Differences
from mlforecast.utils import PredictionIntervals
from window_ops.expanding import expanding_mean
from lightgbm import LGBMRegressor
from utilsforecast.plotting import plot_series
from statistics import mean
import etl.forecast_utils as fu
import etl.callable as cl
```

Load Settings

```{python}
settings_path = "./settings/settings.json"
save = True
initial = True

raw_json = open(settings_path)
settings = json.load(raw_json)
```


```{python}
forecast_model = settings["forecast"]["model"]
fc_path = settings["forecast"]["settings"]["forecast_path"]
fc_log_path = settings["forecast"]["settings"]["forecast_log_path"]
data_path = settings["data"]["data_path"]
unique_id = settings["api"]["facets"]["respondent"]
```
Load Data

```{python}
df = pd.read_csv(data_path)
df["index"] = pd.to_datetime(df["index"])

last_timestamp = df["index"].max().floor("D") - datetime.timedelta(hours = 24*6)

ts = df[df["index"] < last_timestamp]
ts = ts.sort_values(by = "index")
ts = ts.rename(columns={"index": "ds", "respondent":"unique_id", "value": "y"})
ts = ts[["ds", "unique_id", "y"]]
ts.tail()

```



Model Parameters
```{python}
model_obj = eval(forecast_model["args"]["models"][0])
model_label = forecast_model["label"]

model = {
    model_label: model_obj
}

args = forecast_model["args"]
if "lags" not in args.keys():
    args["lags"] = None
if "date_features" not in args.keys():
    args["date_features"] = None
if "target_transforms" not in args.keys():
    args["target_transforms"] = None

h = settings["forecast"]["settings"]["h"] 
pi = settings["forecast"]["settings"]["prediction_intervals"]
forecast_path = settings["forecast"]["settings"]["forecast_path"]
forecast_log_path = settings["forecast"]["settings"]["forecast_log_path"]


```


```{python}
forecast_schema = pb.Schema(
    columns=[
        ("unique_id", "object"),
        ("ds", "datetime64[ns]"),   
        ("model_label", "object"),
        ("forecast", "float64"),
        ("lower", "float64"),
        ("upper", "float64"),
        ("forecast_label", "object")
    ]
)
```

```{python}
cl.forecast_refresh(settings_path = settings_path, schema = forecast_schema, save = True, initial=True, start= datetime.datetime(2025, 4, 1, 0, 0, 0))
```


## Score Forecast

```{python}
cl.score(settings_path=settings_path, save = save)
```

